{"mappings":"CAKsB,SAAUA,EAAGC,EAAIC,GAErC,GAAIF,EAAEG,SAAWF,EAAGE,OAASD,EAAGC,OAE9B,OADAC,QAAQC,KAAI,IACL,EAGT,GAAIL,EAAEM,MAAML,GAAIM,KAAK,IAAIC,SAAWN,EAElC,OADAE,QAAQC,KAAI,IACL,EAGT,IAAII,EAAST,EAAEM,MAAM,IACjBI,EAASV,EAAEM,MAAM,IAGrBL,EAAGK,MAAM,IAAIK,SAAQ,SAAAC,GAEnB,IAA2B,IAAvBF,EAAOG,QAAQD,GAEjB,OADAR,QAAQC,KAAI,IACL,EAGTK,EAAOI,OAAOJ,EAAOG,QAAQD,GAAK,E,IAIpCV,EAAGI,MAAM,IAAIK,SAAQ,SAAAC,GACnB,IAA2B,IAAvBH,EAAOI,QAAQD,GAEjB,OADAR,QAAQC,KAAI,IACL,EAETI,EAAOK,OAAOL,EAAOI,QAAQD,GAAK,E,IAIpCR,QAAQC,IAAIL,EAAEM,MAAM,KAEpBF,QAAQC,IAAII,EAAOF,KAAK,IAAKN,GAC3BG,QAAQC,IAAIK,EAAOH,KAAK,IAAKL,GAExBO,EAAOF,KAAK,MAAQN,GAAMS,EAAOH,KAAK,MAAQL,EACjDE,QAAQC,KAAI,GACZD,QAAQC,KAAI,E,CAGlBU,CAAc,sBAAuB,cAAe","sources":["src/test-tasks/involvesInString.js"],"sourcesContent":["// Test failed with: Random Test -  S = \"k0sfif2Slt5ShLOVt52\", P1 = \"k0sfif2Sl\", P2 = \"t5ShLOVt52\"\n// \tExpected: true\n// \tActual: false\n\n\nconst stringChecker = function (s, p1, p2) {\n\n  if (s.length !== p1.length + p2.length) {\n    console.log(false);\n    return false\n  }\n\n  if (s.split(p1).join(\"\").trim() === p2) {\n    console.log(true);\n    return true;\n};\n \n  let copyP1 = s.split('');\n  let copyP2 = s.split('');\n\n\n  p1.split(\"\").forEach(el => {\n  \n    if (copyP2.indexOf(el) === -1) {\n      console.log(false);\n      return false;\n    }\n\n    copyP2.splice(copyP2.indexOf(el), 1);\n\n  });\n\n  p2.split(\"\").forEach(el => {\n    if (copyP1.indexOf(el) === -1) {\n      console.log(false);\n      return false;\n    }\n    copyP1.splice(copyP1.indexOf(el), 1);\n\n\n  })\n  console.log(s.split(''));\n\n  console.log(copyP1.join(''), p1);\n    console.log(copyP2.join(''), p2);\n\n  return copyP1.join(\"\") === p1 && copyP2.join(\"\") === p2\n    ? console.log(true)\n    : console.log(false);\n};\n\nstringChecker('Y6E34DPHUO457K62onA', 'Y34PU4562nA', '6EDHO7Ko');\n\n\n\n\n// Test failed with: Random Test -  S = \"uLIMHHBKkg414RxzwKy6\", P1 = \"uLIMHHBKkg\", P2 = \"414RxzwKy6\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Random Test -  S = \"Y6E34DPHUO457K62onA\", P1 = \"Y34PU4562nA\", P2 = \"6EDHO7Ko\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Random Test -  S = \"2xcp66q6467t1dG2cBn\", P1 = \"2xcp66q64\", P2 = \"67t1dG2cBn\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Fixed test - S = \"w27y7\", P1 = \"27\", P2 = \"w7y\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Fixed test - S = \" Hacker News! \", P1 = \" cker s \", P2 = \"HaNew!\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Fixed test - S = \"Hacker News!\", P1 = \"Haerws\", P2 = \"ck Ne!\"\n// \tExpected: true\n// \tActual: false\n\n\n// Test failed with: Fixed test - S = \"Do you have a cup of tea? Yes, I do!\", P1 = \" yo ha a cof tea Yes I\", P2 = \"Douveup ?, do!\"\n// \tExpected: true\n// \tActual: false"],"names":["s","p1","p2","length","console","log","split","join","trim","copyP1","copyP2","forEach","el","indexOf","splice","$c1dd8f077897ce88$var$stringChecker"],"version":3,"file":"index.da15b51b.js.map"}