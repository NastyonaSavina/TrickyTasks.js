{"mappings":"YAAA,IAAMA,EAAO,CAAC,EAAG,EAAG,EAAG,GACjBC,EAAO,CAAC,EAAG,EAAG,EAAG,IAkBvB,SAA6BC,EAAgBC,EAASC,GAMpD,IALA,IAAIC,EAAoB,GAEpBC,EAAI,EACJC,EAAI,EAEDD,EAAIH,GAAWI,EAAIH,GACK,IAAzBF,EAAeI,EAAGC,IACpBF,EAAkBG,KAAKF,GACvBA,IACAC,MACkC,IAAzBL,EAAeI,EAAGC,GACzBD,IAEAC,G,CAQRE,EAtCuB,SAACC,EAAQC,GAC9B,QAAQ,GACN,KAAKX,EAAKU,KAAYT,EAAKU,GACzB,OAAO,EACT,KAAKX,EAAKU,GAAUT,EAAKU,GACvB,OAAO,EACT,KAAKX,EAAKU,GAAUT,EAAKU,GACvB,OAAO,EACT,QACE,O,GAIUX,EAAKY,OACLX,EAAKW,O","sources":["src/codeware/compareAr.js"],"sourcesContent":["const arr1 = [1, 2, 2, 2];\nconst arr2 = [1, 1, 2, 2];\n\nconst compareItemsFn = (index1, index2) => {\n  switch (true) {\n    case arr1[index1] === arr2[index2]:\n      return 0;\n    case arr1[index1] < arr2[index2]:\n      return -1;\n    case arr1[index1] > arr2[index2]:\n      return 1;\n    default:\n      return undefined;\n  }\n};\n\nconst length1 = arr1.length;\nconst length2 = arr2.length;\n\nfunction intersectionIndexes(compareItemsFn, length1, length2) {\n  let intersectionArray = [];\n\n  let a = 0;\n  let b = 0;\n\n  while (a < length1 && b < length2) {\n    if (compareItemsFn(a, b) === 0) {\n      intersectionArray.push(a);\n      a++;\n      b++;\n    } else if (compareItemsFn(a, b) === -1) {\n        a++;\n    } else {\n        b++;\n    }\n  }\n  // console.log(intersectionArray);\n\n  return intersectionArray;\n}\n\nintersectionIndexes(compareItemsFn, length1, length2);\n\n\n\n\n// first example of input:\n\n// const arr1 = [1, 2, 2, 2];\n// const arr2 = [1, 1, 2, 2];\n\n// second example of input:\n\n// const arr1 = [1, 2, 2, 3, 4, 5, 6, 7, 9, 9, 20];\n// const arr2 = [1, 2, 3, 3, 5, 8, 9, 9, 21];\n\n// // first example of output:\n\n// // - [0, 1, 2]\n// // - [0, 1, 3]\n// // - [0, 2, 3]\n\n// // second example of output:\n\n// // - [0, 1, 3, 5, 8, 9]\n// // - [0, 2, 3, 5, 8, 9]\n\n// //function compareItemsFn, length1, length2 - from conditions to this task\n\n// const compareItemsFn = (index1, index2) => {\n//     switch (true) {\n//         case arr1[index1] === arr2[index2]: return 0;\n//         case arr1[index1] < arr2[index2]: return -1;\n//         case arr1[index1] > arr2[index2]: return 1;\n//         default: return undefined;\n//     }\n// };\n// const length1 = arr1.length;\n// const length2 = arr2.length;"],"names":["$3b2bbee2a88fbd24$var$arr1","$3b2bbee2a88fbd24$var$arr2","compareItemsFn1","length11","length21","intersectionArray","a","b","push","$3b2bbee2a88fbd24$var$intersectionIndexes","index1","index2","length"],"version":3,"file":"index.f6a73b7d.js.map"}